@charset "UTF-8";
@function ahs-color-palette($palette: 'ahs-blue', $tone: 'base', $palettes: $ahs-color-palettes) {
  @return map-get(map-get($palettes, $palette), $tone);
};

@function color-palette($palette: 'default', $tone: 'base', $palettes: $color-palettes) {
  @return map-get(map-get($palettes, $palette), $tone);
};

$space-last: "    ";
$space-1   : "│   ";
$end-1     : "├── ";
$end-last  : "└── ";
$selector-part: " > ul > li";
@function tree-content($string) {
  $length: str-length($string);
  $return: '';
  @for $i from 1 through $length {
    $character: str-slice($string, $i, $i);
    @if        $character == '└' {
      $return: $return + $end-last;
    } @else if $character == '├' {
      $return: $return + $end-1;
    } @else if $character == '│' {
      $return: $return + $space-1;
    } @else if $character == '_' {
      $return: $return + $space-last;
    } @else {
      @error 'Unknown character.';
    }
  }
  @return $return;
}
@function tree-selector($string) {
  $length: str-length($string);
  $return: '';
  @for $i from 1 through $length {
    $character: str-slice($string, $i, $i);
    @if        $character == '└' {
      $return: $return + $selector-part + ':last-child';
    } @else if $character == '├' {
      $return: $return + $selector-part;
    } @else if $character == '│' {
      $return: $return + $selector-part;
    } @else if $character == '_' {
      $return: $return + $selector-part + ':last-child';
    } @else {
      @error 'Unknown character.';
    }
  }
  @return $return; 
}